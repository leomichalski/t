- name: Setup Web App Server
  hosts: server
  remote_user: ubuntu
  vars:
    timezone: America/Sao_Paulo
    # Only run "apt update && apt upgrade" if the last update is older than 24*60*60 seconds.
    cache_valid_time: 86400
    branch: main

  tasks:
    - name: Update and upgrade apt packages
      become: true
      ansible.builtin.apt:
        upgrade: true
        update_cache: true
        cache_valid_time: "{{ cache_valid_time | int }}"

    - name: Set the timezone to {{ timezone | quote }}
      become: true
      community.general.timezone:
        name: "{{ timezone | quote }}"

    - name: Install tzdata, and ensure it is at the latest version
      become: true
      ansible.builtin.apt:
        name: tzdata
        state: latest
        install_recommends: false

    - name: Install git
      become: true
      ansible.builtin.apt:
        name: git
        state: latest
        install_recommends: false

    - name: Install Docker
      become: true
      ansible.builtin.shell:
        cmd: |
          wget https://get.docker.com/ -O - | sudo tee /install_docker.sh
          sudo sh /install_docker.sh
        creates: /install_docker.sh

    - name: Install Docker Compose
      ansible.builtin.shell:
        cmd: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
        creates: ~/.docker/cli-plugins/docker-compose

    - name: Choose the repository folder (1)
      ansible.builtin.shell:
        cmd: |
          echo $HOME/app
      register: repo_root_

    - name: Choose the repository folder (2)
      ansible.builtin.set_fact:
        repo_root: "{{ repo_root_.stdout }}"

    - name: Clone the repository (no need for 'ansible.builtin.git')
      ansible.builtin.shell:
        cmd: |
          rm -rf {{ repo_root }}
          git clone https://github.com/leomichalski/trabalho-final-gces-2023-2.git -b {{ branch | quote }} {{ repo_root }}

    - name: Create folder for the env files
      ansible.builtin.shell:
        cmd: |
          mkdir -p {{ repo_root }}/.envs/production

    - name: Create envs files
      ansible.builtin.shell:
        cmd: |
          # redis_queue
          echo "\
          REDIS_PORT=6379
          REDIS_URL=redis://redis-queue:6379/1
          " | sudo tee {{ repo_root }}/.envs/production/redis_queue
          # redis_cache
          echo "\
          REDIS_CACHE_PORT=6380
          REDIS_CACHE_URL=redis://redis-cache:6380
          " | sudo tee {{ repo_root }}/.envs/production/redis_cache
          # hostname
          echo "\
          HOSTNAME={{ hostname }}
          ALLOW_HOSTS='{{ hostname }} app localhost 127.0.0.1'
          " | sudo tee {{ repo_root }}/.envs/production/hostname
          # decidim_service
          echo "\
          SECRET_KEY_BASE={{ secret_key_base | quote }}
          DECIDIM_APPLICATION_NAME=Decide
          DECIDIM_MAILER_SENDER={{ admin_email }}
          DECIDIM_DEFAULT_LOCALE=en
          DECIDIM_AVAILABLE_LOCALES=en,pt-BR
          DECIDIM_ENABLE_HTML_HEADER_SNIPPETS=true
          DECIDIM_CURRENCY_UNIT=R$
          DECIDIM_FORCE_SSL=true
          MEETINGS_EMBEDDABLE_SERVICES='youtube.com twitch.tv meet.jit.si'
          INITIATIVES_DEFAULT_COMPONENTS=meetings
          SMTP_USERNAME={{ admin_email }}
          SMTP_PASSWORD={{ smtp_password | quote }}
          SMTP_ADDRESS={{ smtp_address }}
          SMTP_PORT={{ smtp_port }}
          SMTP_DOMAIN={{ smtp_domain }}
          SIDEKIQ_CONCURRENCY=2
          RAILS_SERVE_STATIC_FILES=false
          # RAILS_LOG_TO_JSON=true
          OMNIAUTH_GOVBR_CLIENT_ID={{ client_id | quote }}
          OMNIAUTH_GOVBR_SECRET_KEY={{ secret_key | quote }}
          OMNIAUTH_GOVBR_HOST=sso.staging.acesso.gov.br
          OMNIAUTH_GOVBR_REDIRECT_URI=https://{{ hostname }}/users/auth/govbr/callback
          " | sudo tee {{ repo_root }}/.envs/production/decidim_service
          # database
          echo "\
          DATABASE_HOST={{ postgres_host }}
          DATABASE_PORT={{ postgres_port }}
          DATABASE_DB={{ postgres_db }}
          DATABASE_USERNAME={{ postgres_user }}
          DATABASE_PASSWORD={{ postgres_password | quote }}
          DATABASE_URL=postgres://{{ postgres_user }}:{{ postgres_password }}@{{ postgres_host }}:{{ postgres_port }}/{{ postgres_db }}
          POSTGRES_USER={{ postgres_user }}
          POSTGRES_PASSWORD={{ postgres_password | quote }}
          POSTGRES_PORT={{ postgres_port }}
          POSTGRES_HOST={{ postgres_host }}
          # POSTGRES_DB={{ postgres_db }}
          POSTGRES_URL=postgres://{{ postgres_user }}:{{ postgres_password }}@{{ postgres_host }}:{{ postgres_port }}/{{ postgres_db }}
          " | sudo tee {{ repo_root }}/.envs/production/database
          # admin_password
          echo "\
          ADMIN_PASSWORD={{ admin_password | quote }}
          " | sudo tee {{ repo_root }}/.envs/production/admin_password
          # admin
          echo "\
          ADMIN_USERNAME={{ admin_username }}
          ADMIN_EMAIL={{ admin_email }}
          CERT_EMAIL={{ admin_email }}
          " | sudo tee {{ repo_root }}/.envs/production/admin

    #TODO: maybe replace 'ansible.builtin.shell' with 'community.docker.docker_compose'
    - name: Build the services
      become: true
      ansible.builtin.shell:
        cmd: |
          docker compose --project-directory {{ repo_root }} build

    #TODO: maybe replace 'ansible.builtin.shell' with 'community.docker.docker_compose'
    - name: Remove containers and networks, but keep images and volumes
      become: true
      ansible.builtin.shell:
        cmd: |
          docker compose --project-directory {{ repo_root }} down

    #TODO: maybe replace 'ansible.builtin.shell' with 'community.docker.docker_compose'
    - name: Start the services
      become: true
      ansible.builtin.shell:
        cmd: |
          docker compose --project-directory {{ repo_root }} up -d
